{'TMP': 'C:\\Users\\user\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'UTF-8', 'COMPUTERNAME': 'LAPTOP-M0KNH4BM', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'LAPTOP-M0KNH4BM', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PYTHONDONTWRITEBYTECODE': '1', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '5e03', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Python27;C:\\Python27\\Lib\\site-packages;C:\\Python27\\Scripts;C:\\Program Files\\PuTTY\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\OpenVPN\\bin;C:\\Users\\user\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files (x86)\\Nmap;C:\\Users\\user\\AppData\\Roaming\\npm;C:\\Python27\\lib\\site-packages\\pywin32_system32', 'SYSTEMROOT': 'C:\\Windows', 'PYTHONUNBUFFERED': '1', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\user\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\user\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\user', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-M0KNH4BM', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'user', 'LOGONSERVER': '\\\\LAPTOP-M0KNH4BM', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'C:\\Users\\user\\PycharmProjects\\untitled1;C:\\Program Files (x86)\\JetBrains\\PyCharm Community Edition 2016.3.2\\helpers\\pydev', 'ONEDRIVE': 'C:\\Users\\user\\OneDrive', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CONFIGSETROOT': 'C:\\Windows\\ConfigSetRoot', 'IDE_PROJECT_ROOTS': 'C:/Users/user/PycharmProjects/untitled1', 'IPYTHONENABLE': 'True', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\user\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'GTK_BASEPATH': 'C:\\Program Files (x86)\\GtkSharp\\2.12\\', 'SYSTEMDRIVE': 'C:', 'PYCHARM_HOSTED': '1', 'NUMBER_OF_PROCESSORS': '8', 'LIBRARY_ROOTS': 'C:/Python27/DLLs;C:/Python27/Lib;C:/Python27/Lib/lib-tk;C:/Python27;C:/Python27/Lib/site-packages;C:/Python27/Lib/site-packages/shodan-1.6.7-py2.7.egg!/;C:/Python27/Lib/site-packages/click_plugins-1.0.3-py2.7.egg!/;C:/Python27/Lib/site-packages/keyboard-0.9.13-py2.7-win-amd64.egg!/;C:/Python27/Lib/site-packages/wget-3.2-py2.7.egg!/;C:/Python27/Lib/site-packages/win32;C:/Python27/Lib/site-packages/win32/lib;C:/Python27/Lib/site-packages/pythonwin;C:/Users/user/.PyCharmCE2016.3/system/python_stubs/-762174762;C:/Program Files (x86)/JetBrains/PyCharm Community Edition 2016.3.2/helpers/python-skeletons', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\user'}